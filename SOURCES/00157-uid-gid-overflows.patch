diff -up Python-3.3.0b1/Lib/test/test_os.py.uid-gid-overflows Python-3.3.0b1/Lib/test/test_os.py
--- Python-3.3.0b1/Lib/test/test_os.py.uid-gid-overflows	2012-06-26 16:19:48.000000000 -0400
+++ Python-3.3.0b1/Lib/test/test_os.py	2012-07-20 14:21:46.856688739 -0400
@@ -1174,30 +1174,36 @@ if sys.platform != 'win32':
             def test_setuid(self):
                 if os.getuid() != 0:
                     self.assertRaises(os.error, os.setuid, 0)
+                self.assertRaises(TypeError, os.setuid, 'not an int')
                 self.assertRaises(OverflowError, os.setuid, 1<<32)
 
         if hasattr(os, 'setgid'):
             def test_setgid(self):
                 if os.getuid() != 0 and not HAVE_WHEEL_GROUP:
                     self.assertRaises(os.error, os.setgid, 0)
+                self.assertRaises(TypeError, os.setgid, 'not an int')
                 self.assertRaises(OverflowError, os.setgid, 1<<32)
 
         if hasattr(os, 'seteuid'):
             def test_seteuid(self):
                 if os.getuid() != 0:
                     self.assertRaises(os.error, os.seteuid, 0)
+                self.assertRaises(TypeError, os.seteuid, 'not an int')
                 self.assertRaises(OverflowError, os.seteuid, 1<<32)
 
         if hasattr(os, 'setegid'):
             def test_setegid(self):
                 if os.getuid() != 0 and not HAVE_WHEEL_GROUP:
                     self.assertRaises(os.error, os.setegid, 0)
+                self.assertRaises(TypeError, os.setegid, 'not an int')
                 self.assertRaises(OverflowError, os.setegid, 1<<32)
 
         if hasattr(os, 'setreuid'):
             def test_setreuid(self):
                 if os.getuid() != 0:
                     self.assertRaises(os.error, os.setreuid, 0, 0)
+                self.assertRaises(TypeError, os.setreuid, 'not an int', 0)
+                self.assertRaises(TypeError, os.setreuid, 0, 'not an int')
                 self.assertRaises(OverflowError, os.setreuid, 1<<32, 0)
                 self.assertRaises(OverflowError, os.setreuid, 0, 1<<32)
 
@@ -1212,6 +1218,8 @@ if sys.platform != 'win32':
             def test_setregid(self):
                 if os.getuid() != 0 and not HAVE_WHEEL_GROUP:
                     self.assertRaises(os.error, os.setregid, 0, 0)
+                self.assertRaises(TypeError, os.setregid, 'not an int', 0)
+                self.assertRaises(TypeError, os.setregid, 0, 'not an int')
                 self.assertRaises(OverflowError, os.setregid, 1<<32, 0)
                 self.assertRaises(OverflowError, os.setregid, 0, 1<<32)
 
diff -up Python-3.3.0b1/Lib/test/test_pwd.py.uid-gid-overflows Python-3.3.0b1/Lib/test/test_pwd.py
--- Python-3.3.0b1/Lib/test/test_pwd.py.uid-gid-overflows	2012-06-26 16:19:48.000000000 -0400
+++ Python-3.3.0b1/Lib/test/test_pwd.py	2012-07-20 14:21:46.857688726 -0400
@@ -87,9 +87,9 @@ class PwdTest(unittest.TestCase):
         # In some cases, byuids isn't a complete list of all users in the
         # system, so if we try to pick a value not in byuids (via a perturbing
         # loop, say), pwd.getpwuid() might still be able to find data for that
-        # uid. Using sys.maxint may provoke the same problems, but hopefully
+        # uid. Using 2**32 - 2 may provoke the same problems, but hopefully
         # it will be a more repeatable failure.
-        fakeuid = sys.maxsize
+        fakeuid = 2**32 - 2
         self.assertNotIn(fakeuid, byuids)
         self.assertRaises(KeyError, pwd.getpwuid, fakeuid)
 
